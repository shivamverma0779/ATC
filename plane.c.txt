#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/mq.h>
#include <string.h>
#include <pthread.h>

#define MAX_NUM_AIRPORTS 10
#define MAX_NUM_RUNWAYS 10
#define MAX_WEIGHT 12000
#define MAX_NUM_OCCUPIED_SEATS 10
#define MAX_NUM_PASSENGERS 10
#define MAX_LUGGAGE_WEIGHT 25
#define MAX_BODY_WEIGHT 100
#define BUFFER_SIZE 1024

struct plane_args {
    int plane_id;
    int type;
    int num_occupied_seats;
    int pipes[MAX_NUM_PASSENGERS][2];
};

struct airport_args {
    int airport_id;
    int num_runways;
    int runway_load_capacities[MAX_NUM_RUNWAYS];
};

void *passenger_thread(void *arg) {
    struct plane_args *plane_args = (struct plane_args *) arg;
    int passenger_id = *(int *) arg + 1;
    int luggage_weight, body_weight;

    close(plane_args->pipes[passenger_id-1][0]);
    close(plane_args->pipes[passenger_id-1][1]);

    printf("Passenger %d on Plane %d: Enter Weight of Your Luggage: ", passenger_id, plane_args->plane_id);
    scanf("%d", &luggage_weight);

    printf("Passenger %d on Plane %d: Enter Your Body Weight: ", passenger_id, plane_args->plane_id);
    scanf("%d", &body_weight);

if (write(plane_args->pipes[passenger_id-1][0], &luggage_weight, sizeof(int)) < 0) {
        perror("Error writing to pipe");
        exit(1);
    }

    if (write(plane_args->pipes[passenger_id-1][0], &body_weight, sizeof(int)) < 0) {
        perror("Error writing to pipe");
        exit(1);
    }

    close(plane_args->pipes[passenger_id-1][0]);

    return NULL;
}

int main() {
    int plane_id, type, num_occupied_seats, i, j;
    struct plane_args plane_args;

    printf("Enter Plane ID: ");
    scanf("%d", &plane_id);

    printf("Enter Type of Plane: ");
    scanf("%d", &type);

    if (type == 1) {
        printf("Enter Number of Occupied Seats: ");
        scanf("%d", &num_occupied_seats);

        if (num_occupied_seats < 1 || num_occupied_seats > MAX_NUM_PASSENGERS) {
            perror("Invalid number of occupied seats");
            exit(1);
        }

        for (i = 0; i < num_occupied_seats; i++) {
            if (pipe(plane_args.pipes[i]) < 0) {
                perror("Error creating pipe");
                exit(1);
            }
        }

        pthread_t passenger_threads[num_occupied_seats];

        for (i = 0; i < num_occupied_seats; i++) {
            if (pthread_create(&passenger_threads[i], NULL, passenger_thread, &plane_args) < 0) {
                perror("Error creating thread");
                exit(1);
            }
        }

        for (i = 0; i < num_occupied_seats; i++) {
            if (pthread_join(passenger_threads[i], NULL) < 0) {
                perror("Error joining thread");
                exit(1);
            }
        }

        for (i = 0; i < num_occupied_seats; i++) {
            close(plane_args.pipes[i][0]);
            close(plane_args.pipes[i][1]);
        }
    }

    return 0;
}